find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(KernSmooth)
find.package("KernSmooth")
exit
quit
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
answer <- NULL
complete_List <- complete(directory)
good <- complete_List[["nobs"]]>threshold
lst <- complete_List[good, "id"]
for( i in seq_along(lst)){
if (lst[i] < 10){
partial_File <- paste("00",lst[i],".csv",sep="")
}
else if (lst[i] < 100){
partial_File <- paste("0",lst[i],".csv",sep="")
}
else{
partial_File <- paste(lst[i],".csv",sep="")
}
fileName <- paste(directory,"/",partial_File,sep="")
print(fileName)
data <- read.csv(fileName)
good2 <- complete.cases(data)
x <- data[good2, "nitrate"]
y <- data[good2, "sulfate"]
result <- corr(x, y)
print(result)
answer <- c(answer, result)
}
}
source("complete.R")
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
result <- data.frame(id = NULL, nobs = NULL)
for(i in seq_along(id)){
if (id[i] < 10){
partial_File <- paste("00",id[i],".csv",sep="")
}
else if (id[i] < 100){
partial_File <- paste("0",id[i],".csv",sep="")
}
else{
partial_File <- paste(id[i],".csv",sep="")
}
fileName <- paste(directory,"/",partial_File,sep="")
data <- read.csv(fileName)
good <- complete.cases(data)
temp <- data[good,]
result <- rbind(result, data.frame(id = id[i], nobs = nrow(temp)))
}
result
}
cr <- corr("specdata", 150)
getwd()
setwd("c:/Courser_R")
getwd()
setwd("C:/Coursera_R")
getwd()
cr <- corr("specdata", 150)
x
y
data
clear
cear()
clear()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
answer <- NULL
complete_List <- complete(directory)
good <- complete_List[["nobs"]]>threshold
lst <- complete_List[good, "id"]
for( i in seq_along(lst)){
if (lst[i] < 10){
partial_File <- paste("00",lst[i],".csv",sep="")
}
else if (lst[i] < 100){
partial_File <- paste("0",lst[i],".csv",sep="")
}
else{
partial_File <- paste(lst[i],".csv",sep="")
}
fileName <- paste(directory,"/",partial_File,sep="")
print(fileName)
data <- read.csv(fileName)
good2 <- complete.cases(data)
x <- data[good2, "nitrate"]
y <- data[good2, "sulfate"]
result <- corr(x, y)
print(result)
answer <- c(answer, result)
}
}
data <- read.csv("specdata/002.csv")
good2 <- complete.cases(data)
x <- data[good2, "nitrate"]
y <- data[good2, "sulfate"]
result <- corr(x, y)
x
y
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
answer <- NULL
complete_List <- complete(directory)
good <- complete_List[["nobs"]]>threshold
lst <- complete_List[good, "id"]
for( i in seq_along(lst)){
if (lst[i] < 10){
partial_File <- paste("00",lst[i],".csv",sep="")
}
else if (lst[i] < 100){
partial_File <- paste("0",lst[i],".csv",sep="")
}
else{
partial_File <- paste(lst[i],".csv",sep="")
}
fileName <- paste(directory,"/",partial_File,sep="")
data <- read.csv(fileName)
good2 <- complete.cases(data)
x <- data[good2, "nitrate"]
y <- data[good2, "sulfate"]
result <- cor(x, y)
answer <- c(answer, result)
}
}
cr <- corr("specdata", 150)
head(cr)
x
y
cor(x,y)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
answer <- NULL
complete_List <- complete(directory)
good <- complete_List[["nobs"]]>threshold
lst <- complete_List[good, "id"]
for( i in seq_along(lst)){
if (lst[i] < 10){
partial_File <- paste("00",lst[i],".csv",sep="")
}
else if (lst[i] < 100){
partial_File <- paste("0",lst[i],".csv",sep="")
}
else{
partial_File <- paste(lst[i],".csv",sep="")
}
fileName <- paste(directory,"/",partial_File,sep="")
data <- read.csv(fileName)
good2 <- complete.cases(data)
x <- data[good2, "nitrate"]
y <- data[good2, "sulfate"]
result <- cor(x, y)
answer <- c(answer, result)
}
answer
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(c)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
ls()
getwd()
setwd("C:/Coursera_R/ProgrammingAssignment2")
?matrix
matrix(1:4)
matrix(1:4, nrow = 2, ncol = 2)
c <- matrix(1:4, nrow = 2, ncol = 2)
nrows(c)
nrow(c)
hold_matrix <- matrix(, nrow = nrow(x), ncol = ncol(x))
hold_matrix <- matrix(, nrow = nrow(c), ncol = ncol(c))
hold_matrix
hold_matrix = c
hold_matrix
hold_matrix <- matrix(NULL, nrow = nrow(c), ncol = ncol(c))
x = null
x <- null
x = NULL
x
hold_matrix = matrix(, nrow = nrow(x), ncol = ncol(x))
hold_matrix = matrix(, nrow = nrow(c), ncol = ncol(c))
hold_matrix
hold_matrix
is.null(hold_matrix)
is.NA(hold_matrix)
is.na(hold_matrix)
?is.na
any(is.na(hold_matrix))
?any
?solve
x <- matrix(1:4, nrow = 2, ncol = 2)
x
load(cacheMatrix.R)
source('C:/Coursera_R/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
makeCacheMatrix(x)
cacheSolve(makeCacheMatrix(x))
source('C:/Coursera_R/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
x
source('C:/Coursera_R/ProgrammingAssignment2/cachematrix.R')
cacheSolve(makeCacheMatrix(x))
